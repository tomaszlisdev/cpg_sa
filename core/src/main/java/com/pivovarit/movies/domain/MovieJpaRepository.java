package com.pivovarit.movies.domain;


import lombok.Value;

import java.time.Year;
import java.util.Collection;
import java.util.Optional;
import java.util.stream.Collectors;

@Value
public class MovieJpaRepository implements MovieRepository{
    private final MovieAutogeneratedRepository crudRepository;

    @Override
    public MovieId save(Movie movie) {
        return MovieMapper.INSTANCE.map(crudRepository.save(MovieMapper.INSTANCE.map(movie))).getId();
    }

    @Override
    public Collection<Movie> findAll() {
        return crudRepository.findAll().stream().map(MovieMapper.INSTANCE::map).collect(Collectors.toList());
    }

    @Override
    public Optional<Movie> findByTitle(String title) {
        return crudRepository.findByTitle(title).map(MovieMapper.INSTANCE::map);
    }

    @Override
    public void delete(Movie movie) {
        crudRepository.delete(MovieMapper.INSTANCE.map(movie));
    }

    @Override
    public void deleteById(String movieId) {
        crudRepository.deleteById(new MovieIdPersistence(movieId));
    }

    @Override
    public Collection<Movie> findAllByType(MovieType type) {
        return crudRepository.findAllByType(type);
    }

    @Override
    public Optional<Movie> findById(String id) {
        return crudRepository.findById(new MovieIdPersistence(id))
                .map(moviePersistence -> MovieMapper.INSTANCE.map(moviePersistence));
    }

    @Override
    public Collection<Movie> findAllByYear(Year year) {
        return crudRepository.findAllByYear(year);
    }
}
