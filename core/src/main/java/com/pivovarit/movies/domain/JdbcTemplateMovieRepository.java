package com.pivovarit.movies.domain;

import lombok.RequiredArgsConstructor;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Year;
import java.time.temporal.ChronoField;
import java.util.Collection;
import java.util.Optional;

@RequiredArgsConstructor
class JdbcTemplateMovieRepository implements MovieRepository {

    private static final MovieRowMapper MOVIE_ROW_MAPPER = new MovieRowMapper();
    private final JdbcTemplate jdbcTemplate;

    @Override
    public MovieId save(Movie movie) {
        // to handle autogenerated key
   //     KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update("INSERT INTO movie VALUES (?, ?, ?, ?)",
                new Object[]{movie.getId().getId(), movie.getTitle(), movie.getType().toString(), movie.getYear()}
 //               keyHolder
                );
//        keyHolder.getKey().toString()
        return movie.getId();
    }

    @Override
    public Collection<Movie> findAll() {
        return jdbcTemplate.query("SELECT * FROM movie", new MovieRowMapper());
    }

    @Override
    public Optional<Movie> findByTitle(String title) {
        return jdbcTemplate.query("SELECT * FROM movie WHERE title = ?",
                new Object[]{title},
                new MovieRowMapper()).stream().findAny();
    }

    static class MovieRowMapper implements RowMapper<Movie>{
        @Override
        public Movie mapRow(ResultSet resultSet, int i) throws SQLException {
            return new Movie(
                    new MovieId(resultSet.getString("id")),
                    resultSet.getString("title"),
                    MovieType.valueOf(resultSet.getString("type")),
                    Year.of(resultSet.getInt("year"))
            );
        }
    }

    @Override
    public void delete(Movie movie) {
        deleteById(movie.getId().getId());
    }

    @Override
    public void deleteById(String movieId) {
        jdbcTemplate.update("DELETE FROM movie WHERE movie.id = ?"
                , new Object[]{movieId});
    }

    @Override
    public Collection<Movie> findAllByType(MovieType type) {
        return jdbcTemplate.query("SELECT * FROM movie WHERE movie.type = ?"
                , new Object[]{type}
                , new MovieRowMapper());
    }

    @Override
    public Optional<Movie> findById(String id) {
        return jdbcTemplate.query("SELECT * FROM movie WHERE movie.id = ?"
                , new Object[]{id}
                , new MovieRowMapper()).stream().findAny();
    }

    @Override
    public Collection<Movie> findAllByYear(Year year) {
        return jdbcTemplate.query("SELECT * FROM movie WHERE movie.type = ?"
                , new Object[]{year.getValue()}
                , new MovieRowMapper());
    }
}
